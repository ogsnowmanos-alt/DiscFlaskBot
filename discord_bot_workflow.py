#!/usr/bin/env python3
"""
Discord Bot Workflow Runner
Uruchamia Discord bota w trybie workflow z obs≈ÇugƒÖ b≈Çƒôd√≥w i restart√≥w
"""

import asyncio
import os
import signal
import sys
from datetime import datetime
import logging

# Importy Discord bota
import discord
from discord.ext import commands, tasks
from datetime import timedelta

# Konfiguracja logowania
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('discord_bot_workflow.log')
    ]
)
logger = logging.getLogger('discord_bot_workflow')

# ------------------- KONFIGURACJA -------------------
TOKEN = os.getenv("DISCORD_BOT_TOKEN")
GUILD_ID = 1394086742436614316  # ID serwera Discord
CHANNEL_ID = 1394086743061299349  # ID kana≈Çu do pingowania resp√≥w
RESP_TIME = timedelta(hours=5, minutes=30)  # Czas miƒôdzy respami czempion√≥w

# ------------------- DISCORD BOT -------------------
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

# ------------------- ZMIENNE -------------------
resp_times = {}

champion_aliases = {
    "kowal": "Kowal Lugusa",
    "straz": "Stra≈º Lugusa"
}

lugus_rotation = {
    "Kowal Lugusa": "Stra≈º Lugusa",
    "Stra≈º Lugusa": "Kowal Lugusa"
}

# ------------------- FUNKCJE -------------------
def next_resp(last_resp):
    return last_resp + RESP_TIME

async def ping_resp(champion, channel):
    await channel.send(f"üîî @everyone **{champion}** resp w lochu za 30 minut! üîî")

# ------------------- TASK SPRAWDZAJƒÑCY RESP -------------------
@tasks.loop(minutes=1)
async def check_resp():
    now = datetime.utcnow()
    for champion, last_resp in resp_times.copy().items():
        next_resp_time = last_resp + RESP_TIME
        remaining_seconds = (next_resp_time - now).total_seconds()
        
        # Je≈õli zosta≈Ço 30 minut lub mniej do respu
        if 0 < remaining_seconds <= 1800:  # 30 minut = 1800 sekund
            channel = bot.get_channel(CHANNEL_ID)
            
            if channel:
                await ping_resp(champion, channel)
            
            # Je≈õli to czempion Lugusa, ustaw rotacjƒô na nastƒôpnego
            if champion in lugus_rotation:
                next_champion = lugus_rotation[champion]
                resp_times[next_champion] = next_resp_time
                # Usu≈Ñ poprzedniego czempiona
                if champion in resp_times:
                    del resp_times[champion]
            else:
                # Dla innych czempion√≥w - normalny resp
                resp_times[champion] = next_resp_time

@bot.event
async def on_ready():
    logger.info(f'ü§ñ {bot.user} jest online!')
    logger.info(f'üìä Bot jest na {len(bot.guilds)} serwerach')
    
    # Sprawd≈∫ czy bot ma dostƒôp do konkretnego serwera i kana≈Çu
    guild = bot.get_guild(GUILD_ID)
    if guild:
        logger.info(f'‚úÖ Po≈ÇƒÖczony z serwerem: {guild.name}')
        channel = guild.get_channel(CHANNEL_ID)
        if channel:
            logger.info(f'‚úÖ Dostƒôp do kana≈Çu: {channel.name}')
            permissions = channel.permissions_for(guild.me)
            logger.info(f'üìã Uprawnienia: read_messages={permissions.read_messages}, send_messages={permissions.send_messages}')
        else:
            logger.error(f'‚ùå Brak dostƒôpu do kana≈Çu o ID: {CHANNEL_ID}')
    else:
        logger.error(f'‚ùå Brak dostƒôpu do serwera o ID: {GUILD_ID}')
    
    # Uruchom sprawdzanie resp√≥w
    if not check_resp.is_running():
        check_resp.start()
        logger.info("‚è∞ Timer sprawdzania resp√≥w uruchomiony!")

@bot.event
async def on_message(message):
    # Debug - loguj otrzymane wiadomo≈õci zaczynajƒÖce siƒô od !
    if message.content.startswith('!') and not message.author.bot:
        logger.info(f'üì® Odebrano komendƒô: {message.content} od {message.author}')
    
    # Wa≈ºne: pozw√≥l botowi przetwarzaƒá komendy
    await bot.process_commands(message)

# ------------------- KOMENDY -------------------
@bot.command()
async def resp(ctx):
    """Pokazuje kiedy respi≈Ç siƒô czempion"""
    if not resp_times:
        await ctx.send("üìã **Brak zapisanych resp√≥w czempion√≥w.**\n\nU≈ºyj `!set_resp [nazwa]` aby dodaƒá czempiona.")
        return
    
    now = datetime.utcnow()
    embed = discord.Embed(title="‚è∞ Status resp√≥w czempion√≥w", color=0x00ff00)
    
    for champion, last_resp in resp_times.items():
        next_resp_time = next_resp(last_resp)
        remaining = next_resp_time - now
        
        if remaining.total_seconds() > 0:
            hours, remainder = divmod(int(remaining.total_seconds()), 3600)
            minutes, seconds = divmod(remainder, 60)
            time_str = f"{hours}h {minutes}m {seconds}s"
            status = f"üïê Za: **{time_str}**"
        else:
            status = "‚úÖ **DOSTƒòPNY TERAZ!**"
        
        embed.add_field(
            name=f"üêâ {champion}",
            value=f"Ostatni resp: {last_resp.strftime('%H:%M:%S')}\n{status}",
            inline=True
        )
    
    await ctx.send(embed=embed)

@bot.command()
async def set_resp(ctx, *, champion: str):
    """Rƒôcznie ustawia czas resp czempiona na teraz"""
    champion = champion.strip().lower()
    
    # Sprawd≈∫ czy to skr√≥t
    if champion in champion_aliases:
        full_name = champion_aliases[champion]
        short_name = champion
    else:
        full_name = champion.title()
        short_name = champion
    
    now = datetime.utcnow()
    resp_times[full_name] = now
    
    embed = discord.Embed(
        title="‚úÖ Resp ustawiony",
        description=f"**{full_name}** - resp ustawiony na teraz",
        color=0x00ff00
    )
    
    next_resp_time = next_resp(now)
    embed.add_field(
        name="‚è∞ Nastƒôpny resp",
        value=f"{next_resp_time.strftime('%H:%M:%S')} UTC",
        inline=True
    )
    
    # Je≈õli to Lugus, wyja≈õnij rotacjƒô
    if full_name in lugus_rotation:
        next_champion = lugus_rotation[full_name]
        embed.add_field(
            name="üîÑ Po tym respie",
            value=f"Automatycznie ustawiony: **{next_champion}**",
            inline=True
        )
    
    await ctx.send(embed=embed)

@bot.command()
async def del_resp(ctx, *, champion: str):
    """Usuwa czempiona z listy resp√≥w"""
    champion = champion.strip().lower()
    
    # Sprawd≈∫ czy to skr√≥t
    if champion in champion_aliases:
        full_name = champion_aliases[champion]
    else:
        full_name = champion.title()
    
    if full_name in resp_times:
        del resp_times[full_name]
        embed = discord.Embed(
            title="üóëÔ∏è Resp usuniƒôty",
            description=f"**{full_name}** zosta≈Ç usuniƒôty z listy resp√≥w",
            color=0xff6b6b
        )
    else:
        embed = discord.Embed(
            title="‚ùå Nie znaleziono",
            description=f"Nie znaleziono czempiona **{full_name}** na li≈õcie",
            color=0xff6b6b
        )
    
    await ctx.send(embed=embed)

@bot.command(name="ping")
async def ping_command(ctx):
    """Wy≈õwietla ping bota"""
    latency = round(bot.latency * 1000)  # Konwersja na milisekundy
    embed = discord.Embed(
        title="üèì Ping Bota",
        description=f"**Op√≥≈∫nienie:** {latency}ms",
        color=0x00ff00 if latency < 100 else 0xff9900 if latency < 300 else 0xff0000
    )
    await ctx.send(embed=embed)

@bot.command(name='pomoc')
async def pomoc(ctx):
    """Pokazuje pomoc dla komend bota"""
    embed = discord.Embed(
        title="ü§ñ Pomoc - Bot resp√≥w czempion√≥w",
        description="Bot automatycznie ≈õledzi czasy resp√≥w czempion√≥w i pinguje 30 minut przed ich powrotem!",
        color=0x0099ff
    )
    
    embed.add_field(
        name="üìã !resp",
        value="Pokazuje listƒô wszystkich czempion√≥w i ich czasy resp√≥w",
        inline=False
    )
    
    embed.add_field(
        name="üèì !ping",
        value="Wy≈õwietla op√≥≈∫nienie bota do Discord",
        inline=False
    )
    
    embed.add_field(
        name="‚ûï !set_resp [nazwa]",
        value="Dodaje czempiona i ustawia jego czas respu na teraz\nPrzyk≈Çady: `!set_resp kowal`, `!set_resp straz`, `!set_resp Smok Lodowy`",
        inline=False
    )
    
    embed.add_field(
        name="üóëÔ∏è !del_resp [nazwa]",
        value="Usuwa czempiona z listy resp√≥w\nPrzyk≈Çad: `!del_resp Smok Lodowy`",
        inline=False
    )
    
    embed.add_field(
        name="üîÑ Specjalne skr√≥ty Lugusa:",
        value="‚Ä¢ `kowal` ‚Üí Kowal Lugusa\n‚Ä¢ `straz` ‚Üí Stra≈º Lugusa\n‚Ä¢ Po Kowalu automatycznie respi Stra≈º\n‚Ä¢ Po Stra≈ºy automatycznie respi Kowal",
        inline=False
    )
    
    embed.add_field(
        name="‚ÑπÔ∏è Informacje",
        value=f"‚Ä¢ Czas miƒôdzy respami: **{RESP_TIME.total_seconds() / 3600:.1f} godzin**\n‚Ä¢ Bot pinguje @everyone 30 minut przed respem\n‚Ä¢ Wszystkie czasy w UTC",
        inline=False
    )
    
    await ctx.send(embed=embed)

@bot.event
async def on_command_error(ctx, error):
    """Obs≈Çuga b≈Çƒôd√≥w komend"""
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("‚ùå Brakuje argumentu! U≈ºyj `!pomoc` aby zobaczyƒá jak u≈ºywaƒá komend.")
    elif isinstance(error, commands.CommandNotFound):
        return  # Ignoruj nieznane komendy
    else:
        logger.error(f"B≈ÇƒÖd komendy: {error}")
        await ctx.send("‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas wykonywania komendy.")

# ------------------- WORKFLOW RUNNER -------------------
class DiscordBotWorkflow:
    def __init__(self):
        self.running = False
        self.restart_count = 0
        
    async def run_with_restart(self):
        """Uruchom bota z automatycznym restartem"""
        while True:
            try:
                if not TOKEN:
                    logger.error("‚ùå Brak tokenu Discord!")
                    break
                logger.info("üöÄ Uruchamianie Discord bota w workflow...")
                self.running = True
                await bot.start(TOKEN)
            except discord.LoginFailure:
                logger.error("‚ùå B≈ÅƒÑD: Nieprawid≈Çowy token Discord bota!")
                break
            except KeyboardInterrupt:
                logger.info("üîÑ Bot zatrzymany przez u≈ºytkownika")
                break
            except Exception as e:
                self.restart_count += 1
                logger.error(f"‚ùå B≈ÅƒÑD ({self.restart_count}): {e}")
                
                if self.restart_count > 10:
                    logger.error("üõë Zbyt wiele restart√≥w - zatrzymujƒô bota")
                    break
                
                logger.info(f"üîÑ Restart za 5 sekund... (pr√≥ba {self.restart_count})")
                await asyncio.sleep(5)
                
                # Reset bota dla kolejnej pr√≥by
                if not bot.is_closed():
                    await bot.close()
    
    def stop(self):
        """Zatrzymaj workflow"""
        self.running = False
        logger.info("üõë Zatrzymywanie Discord bota workflow...")

# ------------------- MAIN -------------------
async def main():
    if not TOKEN:
        logger.error("‚ùå B≈ÅƒÑD: Nie znaleziono tokenu Discord bota!")
        logger.error("üìù Ustaw zmiennƒÖ ≈õrodowiskowƒÖ DISCORD_BOT_TOKEN")
        return
    
    workflow = DiscordBotWorkflow()
    
    # Obs≈Çuga sygna≈Ç√≥w dla graceful shutdown
    def signal_handler(signum, frame):
        logger.info(f"üîÑ Otrzymano sygna≈Ç {signum}")
        workflow.stop()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await workflow.run_with_restart()
    except KeyboardInterrupt:
        logger.info("üîÑ Bot zatrzymany")
    finally:
        if not bot.is_closed():
            await bot.close()
        logger.info("üëã Discord bot workflow zako≈Ñczony")

if __name__ == "__main__":
    asyncio.run(main())